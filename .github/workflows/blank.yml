# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, dev, stage ]
    tags:        
      - 'v*'             # Push events on tags
  pull_request:
    branches: [ master, dev, stage ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.4']

    steps:
      
      - name: Check out code
        uses: actions/checkout@v2
      # - name: Get release version
      #   id: vars
      #   run: echo ::add-path name=tag::$(echo $(echo ${GITHUB_REF#refs/tags/}))

      - name: Set up PHP ${{ matrix.php_version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
      - name: Run phpcs with Drupal coding standards.
        run: >
          ./vendor/bin/phpcs -p -s
      - name: Checkout modified files 
        run: git checkout .
      # This will be run when code pushed into the dev env  
      - name: Trigger BLT script to deploy to Acquia Dev env
        if: ${{ startsWith(github.ref, 'refs/heads/dev'  ) }}
        run:  ./vendor/bin/blt artifact:deploy --commit-msg "Automated commit by BLT for Build" --branch $(echo ${GITHUB_REF#refs/heads/})  --ignore-dirty --no-interaction --verbose
      # This will be run when code pushed into Stage Env
      - name: Trigger BLT script to deploy to Acquia Stage ENV
        if: ${{ startsWith(github.ref, 'refs/heads/stage'  ) }}
        run:  ./vendor/bin/blt artifact:deploy --commit-msg "Automated commit by BLT for Build" --branch $(echo ${GITHUB_REF#refs/heads/})  --ignore-dirty --no-interaction --verbose
      # This will be run when Tag is created and deployed into the PROD infra
      - name: Run when tag is created and Deployed code into the Acquia ENV.
        with:
          api_key: ${{secrets.API_KEY}}
          api_secret: ${{secrets.API_SECRET}}
        run: |
          ./vendor/bin/blt artifact:deploy --commit-msg "Creating Automated commit by BLT for Build" --tag $(echo ${GITHUB_REF#refs/tags/})  --ignore-dirty --no-interaction --verbose
          curl -OL https://github.com/acquia/cli/releases/latest/download/acli.phar
          chmod +x acli.phar
          mv acli.phar /usr/local/bin/acli
          acli login -k ${{secrets.API_KEY}} -s ${{secrets.API_SECRET}}
          acli api:environments:code-switch  vss2.prod  "$(echo ${GITHUB_REF#refs/tags/})"
          sleep 30s
      # After Deployment Run Drush command to update the DataBases According to the Branch  
      - name: Run when tag is created after Deployment run Drush Commands
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          ./vendor/bin/drush @vss2.dev cr -y;  ./vendor/bin/drush @vss2.dev updb -y; ./vendor/bin/drush @vss2.dev cim -y; ./vendor/bin/drush @vss2.dev cr -y;
      
      #After Deployment Run Drush command to update the DataBases According to the Branch   
      - name: Excecute Drush Commands at comDev
        if: github.ref == 'refs/heads/master'
        run : ./vendor/bin/drush @vss2.dev cr -y;  ./vendor/bin/drush @vss2.dev updb -y; ./vendor/bin/drush @vss2.dev cim -y; ./vendor/bin/drush @vss2.dev cr -y;
      - name: Use Node.js for running nightwatch test cases ${{ matrix.node-version }}
        if: ${{ startsWith(github.ref, 'refs/heads/dev'  ) }} || ${{ startsWith(github.ref, 'refs/heads/stage'  ) }} || ${{ startsWith(github.ref, 'refs/heads/v'  ) }} || ${{ startsWith(github.ref, 'refs/heads/master'  ) }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependency and Run tests
        run: |
          npm install
          ./node_modules/nightwatch/bin/nightwatch test
      # - name: Send GitHub trigger payload to Slack Workflow Builder
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.15.0
      #   if: always()
      #   with:
      #     payload: "{\"key\":\"value\",\"foo\":\"bar\"}"
      #   env: 
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
       
      # - name: Excecute Drush Commands at comStage
      #   if: github.ref == 'refs/heads/stage'
      #   run : ./vendor/bin/drush @vss2.test cr -y;  ./vendor/bin/drush @vss2.test updb -y; ./vendor/bin/drush @vss2.test cim -y; ./vendor/bin/drush @vss2.test cr -y;
           
      # - name: Deployment Status - Acquia BLT
      #   uses: ravsamhq/notify-slack-action@master
      #   if: always()
      #   with:
      #     status: ${{ job.status }}
      #     if: ${{ failure() }}
      #     notification_title: '{workflow} has failed due to this {status_message}'
      #     else: ${{ success() }} 
      #     notification_title1: '{workflow} has {status_message}'
      #     notify_when: 'success,warnings'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Build notification
        if: always()
        uses: adamkdean/simple-slack-notify@master
        with:
          channel: '#builds'
          status: ${{ job.status }}
          success_text: 'Build (#${env.GITHUB_RUN_NUMBER}) completed successfully'
          failure_text: 'Build (#${env.GITHUB_RUN_NUMBER}) failed'
          cancelled_text: 'Build (#${env.GITHUB_RUN_NUMBER}) was cancelled'
          fields: |
            [{ "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}]
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      # - name: Set up PHP  Linter ${{ matrix.php_version }}
      #   uses: overtrue/phplint@8.0
      #   with:
      #     path: .
      #     options: --exclude=*.log,vendor
      # - name: Run phpcs with Drupal linter
      #   run: >
      #     ./vendor/bin/phplint 
      - name: Install Node for nightwatch testcase
        run: npm install 
      - name: Run the test case with the according to the test folder
        run: >
             ./node_modules/nightwatch/bin/nightwatch test
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2